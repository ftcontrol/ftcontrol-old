import com.android.tools.r8.D8

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.bylazar.mylibrary'

    compileSdkVersion 35

    defaultConfig {
        minSdk 24
    }


    buildTypes {
        release {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
}

dependencies {
    implementation project(':ftcontrol')
}

tasks.register('copyReleaseJarToTeamcodeAssets', Copy) {
    dependsOn(":MyLibrary:build")

    from(zipTree("${layout.buildDirectory.get()}/outputs/aar/${project.name}-release.aar")) {
        include("classes.jar")
        rename { "my-library-release.jar" }
    }

    into("${rootProject.projectDir}/TeamCode/src/main/assets/plugins/")
}

tasks.register('generateLibraryDex') {
    dependsOn("copyReleaseJarToTeamcodeAssets")

    doLast {
        def inputJar = file("${rootProject.projectDir}/TeamCode/src/main/assets/plugins/my-library-release.jar")
        def outputDir = file("${rootProject.projectDir}/TeamCode/src/main/assets/plugins/")

        outputDir.mkdirs()

        D8.main([
                "--release",
                "--output", outputDir.absolutePath,
                inputJar.absolutePath
        ] as String[])

        def generatedDex = new File(outputDir, "classes.dex")
        def renamedDex = new File(outputDir, "my-library.dex")

        if (generatedDex.exists()) {
            generatedDex.renameTo(renamedDex)
            println "Renamed classes.dex to my-library.dex"
        } else {
            println "DEX file not found!"
        }

        if (inputJar.exists()) {
            inputJar.delete()
            println "Deleted original JAR file"
        }
    }
}


tasks.register('prepareLibraryForTeamCode') {
    dependsOn("copyReleaseJarToTeamcodeAssets", "generateLibraryDex")
}